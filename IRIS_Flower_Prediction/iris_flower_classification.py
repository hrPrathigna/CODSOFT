# -*- coding: utf-8 -*-
"""IRIS_Flower_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-0_BE9Sa7bshz8iVrr57d9aqL0qUzN0I

**IRIS Flower Classification**
Problem Statement
The Iris flower dataset consists of three species: setosa, versicolor, and virginica. These species can be distinguished based on their measurements.Now imagine that you have the measurements of Iris flowers categorized by their respective species. Your objective is to train a machine learning model that can learn from these measurements and accurately classify the Iris flowers into their respective species.
"""

# Importing the required libraries

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns

# Loading the dataset

flower=pd.read_csv('IRIS.csv')
flower.head()

# Getting information about data

flower.info()

# Getting Describe Data
flower.describe()

flower.columns

# to display number of samples on each class

flower['species'].value_counts()

#Data Visualization
flower['sepal_length'].hist()

flower['sepal_width'].hist()

flower['petal_length'].hist()

flower['petal_width'].hist()

colors=['red','orange','blue']
species=['Iris-setosa','Iris-versicolor','Iris-virginica']

for i in range(3):
    x=flower[flower['species']==species[i]]
    plt.scatter(x['petal_length'],x['petal_width'],c=colors[i],label=species[i])
plt.xlabel('petal_length')
plt.ylabel('petal_width')
plt.legend()

#Data Preprocessing
flower.isnull().sum()

#Define Target Variable (y) and Feature Variables (X)
y = flower['species']

X = flower.drop(['species'],axis=1)

#train test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, train_size=0.7, random_state=2529)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

#modeling
from sklearn.linear_model import LogisticRegression
model = LogisticRegression(max_iter=500)

#Model Evaluation
model.fit(X_train,y_train)

model.intercept_

model.coef_

#modelPrediction
y_pred = model.predict(X_test)

y_pred

#model accuracy
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

confusion_matrix(y_test,y_pred)

accuracy_score(y_test,y_pred)

print(classification_report(y_test,y_pred))